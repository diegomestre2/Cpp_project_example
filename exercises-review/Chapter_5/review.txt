1. Name four major types of errors and briefly define each one.
- range errors - when dealing with collections the index starts on 0  and goes until the limit of n - 1.  In this case if one tryies to access a value which is out of the required range
a range error happens.

- narrowing errors - when a value is assigned to a determied variable and its type does not fit the entire variable, we may get a narrowing exception.

- logic errors - Once you have removed the compiler and the linker, the program does something that is unexpected. For instance, a function that as declared with a wrong name but it describes a existent function that does something unexpected.

- linking errors - A program consists on various separeted compiled parts. called translation units. every function should be declared in the same way in all units its used.
- run time errors - This kind of errors occurs during execution of a certain progra. For instance a round error or a division by 0.

2. What kinds of errors can we ignore in student programs?
run time errors.

3. What guarantees should every completed project offer?
- Should produce the desired results for all legal inputs.
- Should give reasonable error messages for all illegal inputs.
- Need not worry about misbehaving hardware.
- Need not worry about misbehaving system software.
- Is allowed to terminate after finding an error.

4. List three approaches we can take to eliminate errors in programs and produce acceptable
software.
- Organize software to minimize errors.
- Eliminate most of the errors we made through debbugging and testing.
- Make sure the remaining errors are not serious.

5. Why do we hate debugging?
Its very time consuming.

6. What is a syntax error? Give five examples.
Int value;
boo value;
oid function;
int value
if (cond {}

7. What is a type error? Give five examples.
string s = 7;
function(test);


8. What is a linker error? Give three examples.
A linker error ocurrs when a method is defined but not implemented

9. What is a logic error? Give three examples.
It is a kind of error that ocurrs when the obtained result is different than the expected.


10. List four potential sources of program errors discussed in the text.
Unexpected arguments.
Poor expecification
Unexpected input.

11. How do you know if a result is plausible? What techniques do you have to answer such
questions?
In order to know whether a result is plausible it is necessary to write some test cases.

12. Compare and contrast having the caller of a function handle a run-time error vs. the called
function’s handling the run-time error.
when letting the caller dealing with the errors, all the points where the function is called should check for errors.
When the function is handling the error, only the function it self has to change.

13. Why is using exceptions a better idea than returning an “error value”?
Exceptions help on finding the source of the error.

14. How do you test if an input operation succeeded?
If the input operator succeds we just return the expected value.

15. Describe the process of how exceptions are thrown and caught.

- An excepition can be thrown by the throw keyword or from inside a try block.
The exception is then caught by a cacth keyword. 

16. Why, with a vector called v, is v[v.size()] a range error? What would be the result of calling
this?
A vector in a computer language has an index range of 0 and n - 1, while v.size returns the amount of elements which is n.
This line will return a out of range exception.


17. Define pre-condition and post-condition; give an example (that is not the area() function from
this chapter), preferably a computation that requires a loop.
Pre conditions are defined by the programmer to set the requirements for the arguments.
Post conditions are defined for the returning values.

18. When would you not test a pre-condition?
If is gonna slow down the code.

19. When would you not test a post-condition?
The same as the previous one.

20. What are the steps in debugging a program?
1. Get the program to compile.
2. Get the program to link.
3. Get the program to do what it is supposed to do.

21. Why does commenting help when debugging?
It helps the programmer to understand what is going on in the program.

22. How does testing differ from debugging?
Testing is a sistematic way of finding bugs.