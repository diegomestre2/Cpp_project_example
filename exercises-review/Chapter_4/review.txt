1. What is a computation?
It is the execution of an instruction by the processor.

2. What do we mean by inputs and outputs to a computation? Give examples.
Inputs are values provided by the user or another program as a requirement to perform a computation.
For instance, argc and argv are default inputs for the main function program.

Outputs are the values provided by the program after some sort of computation.
For example, if we have a function that performs the sum of two given input values, the output would be the sum.

3. What are the three requirements a programmer should keep in mind when expressing
computations?
Correctly: The program should be developed correctly.
Simply: The program should be simple.
Efficiently: The program should be effcient.

4. What does an expression do?
An expression computes a value of two operands.
The simplest one is a literal such as 'a', 1, 3.14.
Names of variables are also expressions.

5. What is the difference between a statement and an expression, as described in this chapter?
An expression can be any declaration in C++, while an expression followed by a semicolon is defined as a statement.

6. What is an lvalue? List the operators that require an lvalue. Why do these operators, and not the
others, require an lvalue?
Lvalue is a value that occurs in the left side of an assigment where the operator modifies the operand.
comparison operators == <= >=
logical operators && || >> 
member access -> .
subscripting p[x] == *(p + x)
function call f(input)
Constructor T(input)
casts static_cast reinterpret_cast



7. What is a constant expression?
It is a constant value evaluated during compile time, must be known during compile time.

8. What is a literal?
It is the value in its raw representation


9. What is a symbolic constant and why do we use them?
It is variable which the programmer is not allowed to change its value once it is defined.
They are useful to leave the code more readable with names that represents literals.

10. What is a magic constant? Give examples.
It is a literal representing a constant value such as 3.14 for pi.

11. What are some operators that we can use for integers and floating-point values?
division
sum
difference


12. What operators can be used on integers but not on floating-point numbers?
remainder/modulos operator %


13. What are some operators that can be used for strings?
concat +
comparison == >=


14. When would a programmer prefer a switch-statement to an if-statement?
When he has a selection based on comparison of multiple constants of type char/integer or enum.

15. What are some common problems with switch-statements?
Forget to add a break at the end of each case label.
cannot use the same value for two labels
values in the case label must b a constant expression


16. What is the function of each part of the header line in a for-loop, and in what sequence are they
executed?
the first one is the initializer definition/declaration of variables and is the first to be executed in the first iteration.
the second one is the condition criteria or conditional expression that is evaluated during each iteration to check whether the loop
should finish. 
The third one is the iteration counter or increment operation to keep track of the number of iterations and is also executed for each iteration. 

17. When should the for-loop be used and when should the while-loop be used?
While loop should be used rather than for-loops when a loop cannot be expressed as a for.
For instance, when the number of iterations is not known.

18. How do you print the numeric value of a char?
int(char);
static_cast<int>(char);

19. Describe what the line char foo(int x) means in a function definition.
It means that function foo gets as input an integer x and returns a char value as output.

20. When should you define a separate function for part of a program? List reasons.
When a part of a program is doing more than one task.

21. What can you do to an int that you cannot do to a string?
We can compute the difference and sum.

22. What can you do to a string that you cannot do to an int?
we can concat two strings.

23. What is the index of the third element of a vector?
2

24. How do you write a for-loop that prints every element of a vector?
for (size_t i = 0; i != vector.size(); ++i) {
    std::cout << vector[i] << std::endl;
}

25. What does vector<char> alphabet(26); do?
It declares a vector of char values called alphabet with size 26.

26. Describe what push_back() does to a vector.
It places a value at the end of the vector.

27. What do vectorâ€™s member functions begin(), end(), and size() do?
begin() returns an iterator to the beginning first element of the vector.
end() returns an iterator to the ending, position after the last element of a container.
size() returns the number of elements in the vector.

28. What makes vector so popular/useful?
It organizes data contiguaslly with easy access to the data using indexes.

29. How do you sort the elements of a vector?
std::sort(vector.begin(), vector.end());